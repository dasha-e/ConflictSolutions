#include <iostream>
#include <algorithm>
using namespace std;
int partition(int a[], int start, int end)
{
int pivot = a[end];
int pIndex = start;
for (int i = start; i < end; i++)
{
if (a[i] <= pivot)
{
swap(a[i], a[pIndex]);
pIndex++;
}}
swap (a[pIndex], a[end]);
return pIndex;
}
void quicksort(int* a, int start, int end)
{
if (start >= end) {
return;
}
int pivot = partition(a, start, end);
quicksort(a, start, pivot - 1);
quicksort(a, pivot + 1, end);
}

void insertsort(int *a, int n){
    int key = 0, temp = 0;
	for (int i = 0; i < n - 1; i++)
	{
		key = i + 1;
		temp = a[key];
		for (int j = i + 1; j > 0; j--)
		{
			if (temp < a[j - 1])
			{
				a[j] = a[j - 1];
				key = j - 1;
			}
		}
		a[key] = temp;
	}
}

int main() {
    int n, i;
    std::cout << "Enter the dimension of the array: ";
    std::cin >> n;
    int *a = new int[n];
    std::cout << "Enter the array\n";
    for (i = 0; i < n; i++) {
        std::cin >> a[i];
    }
quicksort(a, 0, n - 1);
for (int i = 0; i < n; i++) {
cout << a[i] << " ";
}
return 0;
}  
